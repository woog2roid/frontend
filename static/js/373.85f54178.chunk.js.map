{"version":3,"file":"static/js/373.85f54178.chunk.js","mappings":"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","sources":["hooks/useSocket.ts","hooks/useSWRChatRooms.ts","components/Chat/ChatRoomList/ChatRoomListItem/style.tsx","components/Chat/ChatRoomList/ChatRoomListItem/index.tsx","components/Chat/ChatRoomList/ChatRoomController/GenerateChatRoomModal/style.tsx","components/Chat/ChatRoomList/ChatRoomController/GenerateChatRoomModal/index.tsx","components/Chat/ChatRoomList/ChatRoomController/style.tsx","components/Chat/ChatRoomList/ChatRoomController/index.tsx","components/Chat/ChatRoomList/index.tsx","pages/Chat/style.tsx","components/Chat/ChatBox/ChatList/UserChat/style.tsx","components/Chat/ChatBox/ChatList/UserChat/index.tsx","components/Chat/ChatBox/ChatList/SystemChat/style.tsx","components/Chat/ChatBox/ChatList/SystemChat/index.tsx","components/Chat/ChatBox/ChatList/index.tsx","components/Chat/ChatBox/ChatRoomInfo/ChatRoomMembersModal/style.tsx","components/Chat/ChatBox/ChatRoomInfo/ChatRoomMembersModal/index.tsx","components/Chat/ChatBox/ChatRoomInfo/style.tsx","components/Chat/ChatBox/ChatRoomInfo/index.tsx","components/Chat/ChatBox/MessageInputBox/style.tsx","components/Chat/ChatBox/MessageInputBox/index.tsx","components/Chat/ChatBox/NewChatAlert/index.tsx","components/Chat/ChatBox/style.tsx","components/Chat/ChatBox/index.tsx","pages/Chat/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { io, Socket } from 'socket.io-client';\n\nconst sockets: { [id: string]: Socket } = {};\n\nconst useSocket = (channel: string): [Socket | undefined, () => void] => {\n  const disconnect = React.useCallback(() => {\n    if (sockets[channel]) {\n      sockets[channel].disconnect();\n      delete sockets[channel];\n    }\n  }, [channel]);\n\n  // namespace: 게임 or 채팅 채널로 구분\n  // room : 게임 방, 채팅 방 id\n  if (channel !== 'game' && channel !== 'chat') {\n    return [undefined, () => {}];\n  }\n\n  if (!sockets[channel]) {\n    sockets[channel] = io(`${process.env.REACT_APP_SERVER}/${channel}`, { transports: ['websocket'] });\n    console.log('create socket', channel, sockets[channel]);\n  }\n\n  return [sockets[channel], disconnect];\n};\n\nexport default useSocket;\n","import * as React from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IChatRoom } from '@typings/dbTypes';\nimport axios from '@utils/axios';\n\nimport { produce } from 'immer';\n\nconst useSWRChatRooms = () => {\n  const { id: chatRoomId } = useParams();\n\n  const mutateUnreadsLocally = React.useCallback(() => {\n    mutateChatRoomsData((chatRoomsData) => {\n      const updatedChatRoomsData = produce(chatRoomsData, (chatRoomsData) => {\n        chatRoomsData?.map((chatRoom) => {\n          if (chatRoomId && chatRoom.id === +chatRoomId) {\n            chatRoom.unreads = 0;\n          }\n          return chatRoom;\n        });\n      });\n      return updatedChatRoomsData;\n    }, false);\n  }, [chatRoomId]);\n\n  const { data: chatRoomsData, mutate: mutateChatRoomsData } = useSWR<\n    IChatRoom[]\n  >(`/chat-room`, fetcher, {\n    onSuccess() {\n      console.log('onSuccess 함수 정상 작동 중');\n      if (chatRoomId) {\n        mutateUnreadsLocally();\n      }\n    },\n  });\n\n  const postLastReadTimestamp = () => {\n    if (chatRoomId !== undefined) {\n      axios.post(`/chat-room/${chatRoomId}/last-read`).then(() => {\n        mutateUnreadsLocally();\n      });\n    }\n  };\n\n  return { chatRoomsData, mutateChatRoomsData, postLastReadTimestamp };\n};\n\nexport default useSWRChatRooms;\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  height: 35px;\n  width: 100%;\n\n  & > .unreads {\n    background-color: \n  }\n`;\n","import * as React from 'react';\n\nimport { IChatRoom } from '@typings/dbTypes';\n\nimport { useNavigate } from 'react-router-dom';\n\nimport { Wrapper } from './style';\nimport { Chip } from '@mui/material';\n\ntype propsType = {\n  data: IChatRoom;\n};\n\nexport default function ChatRoomListItem({ data }: propsType) {\n  const navigate = useNavigate();\n\n  const onClick = () => {\n    navigate(`/chat/${data.id}`);\n  };\n\n  return (\n    <Wrapper onClick={onClick}>\n      <span>{data.title}</span>\n      {data.unreads > 0 ? (\n        <Chip label={data.unreads} color=\"error\" variant=\"outlined\" />\n      ) : (\n        <></>\n      )}\n    </Wrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport { Button, List } from '@mui/material';\n\nexport const modalStyle = {\n  position: 'absolute' as 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  maxHeight: 630,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 2,\n};\n\nexport const CustomStyledButton = styled(Button)`\n  float: right;\n`;\n\nexport const CustomStyledList = styled(List)`\n  max-height: 500px;\n  overflow-y: auto;\n`;\n","import * as React from 'react';\n\nimport {\n  Modal,\n  Box,\n  Button,\n  Checkbox,\n  Divider,\n  List,\n  ListItem,\n  OutlinedInput,\n} from '@mui/material';\nimport { modalStyle, CustomStyledButton, CustomStyledList } from './style';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport axios from '@utils/axios';\nimport { IFriends, IUserRelation, IChatRoom, IUser } from '@typings/dbTypes';\nimport useSWRChatRooms from '@hooks/useSWRChatRooms';\n\ntype propsType = {\n  isOpen: boolean;\n  handleClose: () => void;\n};\n\nexport default function GenerateChatRoomModal({\n  isOpen,\n  handleClose,\n}: propsType) {\n  const { data: friendsData } = useSWR<IFriends>(`/friend`, fetcher);\n  const { data: userData, mutate: mutateUserData } = useSWR<IUser>(\n    `/user/me`,\n    fetcher,\n  );\n  const { chatRoomsData, mutateChatRoomsData, postLastReadTimestamp } =\n    useSWRChatRooms();\n\n  const [checkedUsers, setCheckedUsers] = React.useState<string[]>([]);\n  const handleUserToggle = (id: string) => () => {\n    const currentIndex = checkedUsers.indexOf(id);\n    const newCheckedUsers = [...checkedUsers];\n\n    if (currentIndex === -1) {\n      newCheckedUsers.push(id);\n    } else {\n      newCheckedUsers.splice(currentIndex, 1);\n    }\n\n    setCheckedUsers(newCheckedUsers);\n  };\n\n  const onSubmit = React.useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (checkedUsers.length === 0) {\n        return alert('채팅방멤버를 체크해주세요.');\n      }\n      if (checkedUsers.length === 1) {\n        return alert(\n          '그룹채팅방 만들기 입니다. 일대일 채팅은 자동생성 된 채팅방을 이용해주세요.',\n        );\n      }\n\n      handleClose();\n      if (userData !== undefined) {\n        const chatRoomMembers = [...checkedUsers];\n        chatRoomMembers.push(userData.id);\n        const chatRoomTitle = e.target.chatRoomTitle.value;\n        console.log(\n          '채팅방 유저들',\n          chatRoomMembers,\n          '채팅방 이름',\n          e.target.chatRoomTitle.value,\n        );\n\n        axios\n          .post(`/chat-room?dm=false`, {\n            members: chatRoomMembers,\n            title: chatRoomTitle,\n          })\n          .then((res) => {\n            mutateChatRoomsData();\n            e.target.chatRoomTitle.value = '';\n            setCheckedUsers([]);\n          });\n      }\n    },\n    [checkedUsers],\n  );\n\n  return (\n    <Modal open={isOpen} onClose={handleClose}>\n      <Box component=\"form\" sx={modalStyle} onSubmit={onSubmit}>\n        <OutlinedInput\n          name=\"chatRoomTitle\"\n          placeholder=\"채팅방 이름\"\n          size=\"small\"\n          fullWidth\n          required\n        />\n        <Divider sx={{ mt: 1, mb: 1 }} />\n        <CustomStyledList>\n          {friendsData?.friends?.map((friendsData: IUserRelation) => {\n            return (\n              <ListItem\n                key={+friendsData.id}\n                secondaryAction={\n                  <Checkbox\n                    edge=\"end\"\n                    onChange={handleUserToggle(friendsData.following.id)}\n                    checked={\n                      checkedUsers.indexOf(friendsData.following.id) !== -1\n                    }\n                  />\n                }\n              >\n                <span>\n                  {friendsData.following.nickname}({friendsData.following.id})님\n                </span>\n              </ListItem>\n            );\n          })}\n        </CustomStyledList>\n        <Divider sx={{ mt: 1, mb: 1 }} />\n        <CustomStyledButton type=\"submit\" variant=\"contained\">\n          채팅방 만들기\n        </CustomStyledButton>\n      </Box>\n    </Modal>\n  );\n}\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n\n  padding: 5px;\n\n  & > .icons {\n    padding: 3px;\n  }\n`;\n","import * as React from 'react';\n\nimport { MarkChatReadOutlined, AddBoxOutlined } from '@mui/icons-material';\n\nimport GenerateChatRoomModal from './GenerateChatRoomModal';\nimport { Wrapper } from './style';\n\nexport default function ChatRoomController() {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n\n  const onClickReadAll = () => {\n    console.log('안 읽은 채팅 모두 읽기');\n  };\n\n  const onClickGenerateChatRoom = () => {\n    openModal();\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <span className=\"icons\" onClick={onClickReadAll}>\n          <MarkChatReadOutlined />\n        </span>\n        <span className=\"icons\" onClick={onClickGenerateChatRoom}>\n          <AddBoxOutlined />\n        </span>\n      </Wrapper>\n\n      <GenerateChatRoomModal isOpen={isModalOpen} handleClose={closeModal} />\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport useSWRChatRooms from '@hooks/useSWRChatRooms';\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IChatRoom } from '@typings/dbTypes';\nimport axios from '@utils/axios';\n\nimport ChatRoomList from './ChatRoomListItem';\nimport ChatRoomController from './ChatRoomController';\n\nimport { Divider, List, ListItem } from '@mui/material';\n\nexport default function Chat() {\n  const { chatRoomsData, mutateChatRoomsData, postLastReadTimestamp } =\n    useSWRChatRooms();\n\n  return (\n    <>\n      <ChatRoomController />\n      <Divider />\n      <List sx={{ padding: 0, margin: 0 }}>\n        {chatRoomsData?.map((data: IChatRoom) => {\n          return (\n            <ListItem key={+data.id} button>\n              <ChatRoomList data={data} />\n            </ListItem>\n          );\n        })}\n      </List>\n    </>\n  );\n}\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nconst Wrapper = styled.div`\n  display: flex;\n  height: 100%;\n\n  & > .chat-room-list {\n    width: 25%;\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n\n  & > .chat-box {\n    width: 75%;\n  }\n`;\n\nexport default Wrapper;\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\ntype wrapperProps = {\n  isMyMessage: boolean;\n};\nexport const Wrapper = styled.div<wrapperProps>`\n  text-align: ${(props) => (props.isMyMessage ? 'right' : 'left')};\n  margin: 8px 0px;\n\n  & > .sender {\n    font-size: 13px;\n    margin: 2px;\n  }\n\n  & > .content {\n    display: flex;\n    flex-direction: ${(props) => (props.isMyMessage ? 'row-reverse' : 'row')};\n    align-items: center;\n\n    & > .message {\n      max-width: 800px;\n      word-break: break-all;\n      text-align: left;\n\n      border-radius: 6px;\n      padding: 3px 6px;\n      background-color: ${Color.TransparentGray};\n\n      font-size: 16px;\n    }\n\n    & > .timestamp {\n      margin: 0px 5px;\n      font-size: 8px;\n    }\n  }\n`;\n","import * as React from 'react';\n\nimport dayjs from 'dayjs';\nimport { IChat } from '@typings/dbTypes';\n\nimport { Wrapper } from './style';\n\ntype propsType = {\n  data: IChat;\n  isMyMessage: boolean;\n  showsSender: boolean;\n};\n\nexport default function UserChat({ data, isMyMessage, showsSender }: propsType) {\n  const { message, createdAt } = data;\n  const { id: senderId, nickname: senderNickname } = data.sender;\n\n  return (\n    <Wrapper isMyMessage={isMyMessage}>\n      {showsSender ? <div className=\"sender\">{senderNickname}님</div> : <></>}\n      <div className=\"content\">\n        <span className=\"message\">{message}</span>\n        <span className=\"timestamp\">{dayjs(createdAt).format('h:mm A')}</span>\n      </div>\n    </Wrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nexport const Wrapper = styled.div`\n  text-align: center;\n  margin: 8px 0px;\n\n  & > .sender {\n    font-size: 13px;\n    margin: 2px;\n  }\n\n  & > .content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    & > .message {\n      max-width: 800px;\n      word-break: break-all;\n      text-align: left;\n\n      border-radius: 6px;\n      padding: 3px 6px;\n      background-color: ${Color.TransparentGray};\n\n      font-size: 16px;\n    }\n  }\n`;\n","import * as React from 'react';\n\nimport { IChat } from '@typings/dbTypes';\n\nimport { Wrapper } from './style';\n\ntype propsType = {\n  data: IChat;\n};\n\nexport default function UserChat({ data }: propsType) {\n  const { message, createdAt } = data;\n\n  return (\n    <Wrapper>\n      <div className=\"content\">\n        <span className=\"message\">{message}</span>\n      </div>\n    </Wrapper>\n  );\n}\n","import * as React from 'react';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IUser, IChat } from '@typings/dbTypes';\n\nimport dayjs from 'dayjs';\n\nimport { Divider, Chip } from '@mui/material';\nimport UserChat from './UserChat';\nimport SystemChat from './SystemChat';\n\ntype propsType = {\n  chatsByDate: { [key: string]: IChat[] };\n};\n\nexport default function ChatList({ chatsByDate }: propsType) {\n  const { data: userData } = useSWR<IUser>(`/user/me`, fetcher);\n\n  React.useEffect(() => {\n    console.log('챗리스트 컴포넌트 테스트', Object.entries(chatsByDate));\n  });\n\n  return (\n    <>\n      {Object.entries(chatsByDate).map(([date, chats]) => {\n        return (\n          <div key={date}>\n            <Divider>\n              <Chip label={date} />\n            </Divider>\n            {chats.map((chat, index) => {\n              if (chat.system) {\n                return <SystemChat key={chat.id} data={chat} />;\n              }\n              if (chat.sender.id === userData?.id) {\n                return (\n                  <UserChat\n                    key={chat.id}\n                    data={chat}\n                    showsSender={false}\n                    isMyMessage={true}\n                  />\n                );\n              }\n              if (index === 0) {\n                return (\n                  <UserChat\n                    key={chat.id}\n                    data={chat}\n                    showsSender={true}\n                    isMyMessage={false}\n                  />\n                );\n              } else {\n                return (\n                  <UserChat\n                    key={chat.id}\n                    data={chat}\n                    showsSender={\n                      chats[index - 1].sender.id !== chat.sender.id ||\n                      dayjs(chats[index - 1].createdAt).format(\n                        'YYYY-MM-DD HH:mm',\n                      ) !== dayjs(chat.createdAt).format('YYYY-MM-DD HH:mm')\n                    }\n                    isMyMessage={false}\n                  />\n                );\n              }\n            })}\n          </div>\n        );\n      })}\n    </>\n  );\n}\n","export const modalStyle = {\n  position: 'absolute' as 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n","import { Modal, Box, Typography } from '@mui/material';\nimport { modalStyle } from './style';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IUser } from '@typings/dbTypes';\n\ntype propsType = {\n  isOpen: boolean;\n  handleClose: () => void;\n  chatRoomMembers: IUser[] | undefined;\n};\n\nexport default function ChatRoomMemberModal({ isOpen, handleClose, chatRoomMembers }: propsType) {\n  const { data: userData } = useSWR<IUser>(`/user/me`, fetcher);\n\n  return (\n    <Modal open={isOpen} onClose={handleClose}>\n      <Box sx={modalStyle}>\n        {chatRoomMembers?.map((member) => {\n          if (member.id === userData?.id) return;\n          return (\n            <div key={member.id}>\n              {member.nickname}({member.id})님\n            </div>\n          );\n        })}\n      </Box>\n    </Modal>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  padding: 15px;\n  height: 25px;\n\n  display: flex;\n  align-items: center;\n\n  font-size: 18px;\n`;\n","import * as React from 'react';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IChatRoom, IUser } from '@typings/dbTypes';\nimport axios from '@utils/axios';\n\nimport ChatRoomMembersModal from './ChatRoomMembersModal';\nimport { InfoOutlined } from '@mui/icons-material';\nimport { Wrapper } from './style';\n\nimport { useParams } from 'react-router-dom';\n\nexport default function ChatRoomInfo() {\n  const { id: chatRoomId } = useParams();\n  const { data: chatRoomsData, mutate: mutateChatRoomsData } = useSWR<IChatRoom[]>(`/chat-room`, fetcher);\n  const [chatRoomMembers, setChatRoomMembers] = React.useState<IUser[] | undefined>();\n  const [chatRoomData, setChatRoomData] = React.useState<IChatRoom | undefined>();\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n\n  React.useEffect(() => {\n    const getChatRoomMembers = () => {\n      axios\n        .get<IUser[]>(`/chat-room/${chatRoomId}/member`)\n        .then((res) => {\n          setChatRoomMembers(res.data);\n          console.log(chatRoomMembers);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    };\n\n    const getChatRoomData = () => {\n      const chatRoomData = chatRoomsData?.find((data) => {\n        if (chatRoomId !== undefined) {\n          return data.id === +chatRoomId;\n        }\n      });\n      setChatRoomData(chatRoomData);\n    };\n\n    getChatRoomMembers();\n    getChatRoomData();\n  }, [chatRoomId]);\n\n  return (\n    <Wrapper>\n      <span>{chatRoomData !== undefined ? chatRoomData.title : ' '}</span>\n      <InfoOutlined onClick={openModal} fontSize=\"small\" />\n\n      <ChatRoomMembersModal isOpen={isModalOpen} handleClose={closeModal} chatRoomMembers={chatRoomMembers} />\n    </Wrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nexport const MessageInputBoxWrapper = styled.form`\n  width: 90%;\n  margin: 0 auto;\n  padding: 5px;\n  text-align: center;\n\n  border: 1px solid ${Color.Gray};\n  border-radius: 20px;\n\n  & > input {\n    background-color: transparent;\n\n    width: calc(90% - 30px);\n    height: 40px;\n\n    font-family: MinSans;\n    font-size: 15px;\n\n    border: none;\n    &: focus {\n      outline: none;\n    }\n  }\n`;\n","import * as React from 'react';\n\nimport axios from '@utils/axios';\n\nimport { useParams } from 'react-router-dom';\n\nimport { MessageInputBoxWrapper } from './style';\nimport { Button } from '@mui/material';\n\nexport default function MessageInputBox() {\n  const { id: chatRoomId } = useParams();\n\n  const onSubmitSendMessage = React.useCallback(\n    async (e) => {\n      e.preventDefault();\n      console.log(e.target.input.value);\n      await axios\n        .post(`/chat-room/${chatRoomId}/chat`, {\n          message: e.target.input.value,\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      e.target.input.value = '';\n    },\n    [chatRoomId],\n  );\n\n  return (\n    <MessageInputBoxWrapper onSubmit={onSubmitSendMessage}>\n      <input name=\"input\" placeholder=\"메세지 입력...\" />\n      <Button variant=\"text\" type=\"submit\" sx={{ ml: '5px' }}>\n        보내기\n      </Button>\n    </MessageInputBoxWrapper>\n  );\n}\n","import * as React from 'react';\n\nimport { IChat } from '@typings/dbTypes';\n\nimport { Chip } from '@mui/material';\n\ntype propsType = {\n  data: IChat;\n  onClick: () => void;\n  onDelete: () => void;\n};\n\nexport default function UserChat({ data, onClick, onDelete }: propsType) {\n  const { message, sender } = data;\n  const { nickname } = sender;\n\n  const label = `${nickname}님: ${message}`;\n  return (\n    <Chip\n      label={label}\n      onClick={onClick}\n      onDelete={onDelete}\n      sx={{\n        width: '100%',\n      }}\n    />\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ChatBoxLayout = styled.div`\n  height: 100%;\n\n  -ms-user-select: text;\n  -moz-user-select: text;\n  -khtml-user-select: text;\n  -webkit-user-select: text;\n  user-select: text;\n\n  & > .chat-room-info {\n    height: 55px;\n  }\n\n  & > .chat-room {\n    position: relative;\n\n    height: calc(100% - 10px - 55px - 70px);\n    padding: 5px 20px 5px 20px;\n\n    overflow-y: auto;\n    overflow-x: hidden;\n\n    & > .new-chat {\n      position: sticky;\n      bottom: 20px;\n    }\n  }\n\n  & > .message-input {\n    padding: 5px;\n    height: 60px;\n  }\n`;\n","import * as React from 'react';\nimport useSocket from '@hooks/useSocket';\n\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport fetcher from '@utils/swrFetcehr';\nimport { IChat, IUser } from '@typings/dbTypes';\nimport axios from '@utils/axios';\n\nimport produce from 'immer';\n\nimport { useParams } from 'react-router-dom';\n\nimport dayjs from 'dayjs';\n\nimport ChatList from './ChatList';\nimport ChatRoomInfo from './ChatRoomInfo';\nimport MessageInputBox from './MessageInputBox';\nimport NewChatAlert from './NewChatAlert';\n\nimport { Divider } from '@mui/material';\nimport { ChatBoxLayout } from './style';\n\nexport default function ChatBox() {\n  //get Chat Data from server\n  const { id: chatRoomId } = useParams();\n  const { data: userData } = useSWR<IUser>(`/user/me`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChatData,\n    setSize: setSWRInfiniteSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/chat-room/${chatRoomId}/chat/?page=${index + 1}`,\n    fetcher,\n    {\n      onSuccess(data) {\n        if (data?.length === 1) {\n          setTimeout(() => {\n            //채팅 로딩 시간 기다림 + 최초 로딩시에만\n            scrollToBottom();\n          }, 100);\n        }\n      },\n    },\n  );\n\n  //scroll\n  const chatBoxScroll = React.useRef<HTMLInputElement>(null);\n  const scrollToBottom = React.useCallback(() => {\n    if (chatBoxScroll && chatBoxScroll.current) {\n      chatBoxScroll.current.scrollTop = chatBoxScroll.current.scrollHeight;\n    }\n  }, [chatRoomId]);\n\n  const onChatBoxScroll = React.useCallback(\n    (e) => {\n      if (e.target.scrollTop === 0) {\n        //맨 위\n        if (\n          //더 이상 불러올 채팅이 없지 않다면\n          chatData &&\n          !(\n            chatData?.[0]?.length === 0 ||\n            chatData?.[chatData?.length - 1]?.length < 100\n          )\n        ) {\n          const scrollHeightBeforeFetch = e.target.scrollHeight;\n          setSWRInfiniteSize((size) => size + 1).then(() => {\n            if (chatBoxScroll && chatBoxScroll.current) {\n              e.target.scrollTop =\n                chatBoxScroll?.current?.scrollHeight - scrollHeightBeforeFetch;\n            }\n          });\n        }\n      }\n      if (e.target.scrollTop >= e.target.scrollHeight - 600) {\n        //맨 아래\n        setUncheckedChat(undefined);\n      }\n    },\n    [chatData],\n  );\n\n  //new message float alert\n  const [uncheckedChat, setUncheckedChat] = React.useState<IChat>();\n  const handleNewChatAlertClick = () => {\n    handleNewChatAlertDelete();\n    scrollToBottom();\n  };\n  const handleNewChatAlertDelete = () => {\n    setUncheckedChat(undefined);\n  };\n\n  React.useEffect(() => {\n    setUncheckedChat(undefined);\n  }, [chatRoomId]);\n\n  //socket\n  const [socket] = useSocket('chat');\n\n  const onMessage = React.useCallback(\n    (socketChat: IChat) => {\n      console.log('웹 소켓 메세지 도착', socketChat);\n      mutateChatData((previousChatData) => {\n        //socket 데이터 바탕으로 local에서 직접 업데이트\n        const updatedChatData = produce(\n          previousChatData,\n          (previousChatData) => {\n            previousChatData?.[0].unshift(socketChat);\n          },\n        );\n        return updatedChatData;\n      }, false).then(() => {\n        //그 후에 채팅창 UX 조절 (스크롤 or 토스트)\n        if (chatBoxScroll && chatBoxScroll.current) {\n          console.log(\n            chatBoxScroll.current.scrollTop,\n            chatBoxScroll.current.scrollHeight,\n          );\n          if (\n            //아직 채팅창이 한장을 안넘어가거나\n            chatBoxScroll.current.scrollHeight < 800 ||\n            //이미 충분히 밑이거나\n            chatBoxScroll.current.scrollTop >\n              chatBoxScroll.current.scrollHeight - 800 ||\n            //본인이 보낸 메세지이면\n            socketChat.sender.id === userData?.id\n          ) {\n            scrollToBottom();\n            setUncheckedChat(undefined);\n          } else {\n            setUncheckedChat(socketChat);\n          }\n        }\n      });\n    },\n    [mutateChatData],\n  );\n\n  React.useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message');\n    };\n  }, [socket, mutateChatData]);\n\n  //uswSWRInfinte 에서 온 data를 후가공함.\n  const sortChatDataByDate = (chats: IChat[]) => {\n    console.log('sortChatDataByDate 함수 실행');\n    //데이터에 날자를 기준으로\n    const chatsByDate: { [key: string]: IChat[] } = {};\n\n    chats.forEach((chat) => {\n      const date = dayjs(chat.createdAt).format('YYYY-MM-DD');\n      if (chatsByDate[date] === undefined) {\n        chatsByDate[date] = [chat];\n      } else {\n        chatsByDate[date].push(chat);\n      }\n    });\n\n    return chatsByDate;\n  };\n\n  const chatsByDate =\n    chatData !== undefined\n      ? sortChatDataByDate(([] as IChat[]).concat(...chatData).reverse())\n      : undefined;\n\n  return (\n    <ChatBoxLayout>\n      <div className=\"chat-room-info\">\n        <ChatRoomInfo />\n      </div>\n      <Divider />\n      <div className=\"chat-room\" ref={chatBoxScroll} onScroll={onChatBoxScroll}>\n        {chatsByDate !== undefined ? (\n          <ChatList chatsByDate={chatsByDate} />\n        ) : (\n          <></>\n        )}\n        {uncheckedChat !== undefined ? (\n          <div className=\"new-chat\">\n            <NewChatAlert\n              data={uncheckedChat}\n              onClick={handleNewChatAlertClick}\n              onDelete={handleNewChatAlertDelete}\n            />\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n      <div className=\"message-input\">\n        <MessageInputBox />\n      </div>\n    </ChatBoxLayout>\n  );\n}\n","import * as React from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport useSocket from '@hooks/useSocket';\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport axios from '@utils/axios';\nimport { IUser, IChatRoom } from '@typings/dbTypes';\nimport useSWRChatRooms from '@hooks/useSWRChatRooms';\n\nimport produce from 'immer';\n\nimport ChatRoomList from '@components/Chat/ChatRoomList';\n\nimport { Divider } from '@mui/material';\nimport ChatComponenetWrapper from '../../pages/Chat/style';\n\nimport MainLayout from '@layouts/MainLayout';\nimport ChatBox from '@components/Chat/ChatBox';\n\nexport default function ChatInbox() {\n  const { id: chatRoomId } = useParams();\n  const { data: userData } = useSWR<IUser>(`/user/me`, fetcher);\n\n  const { chatRoomsData, mutateChatRoomsData, postLastReadTimestamp } =\n    useSWRChatRooms();\n\n  const [socket, disconnectSocket] = useSocket('chat');\n\n  React.useEffect(() => {\n    const socketData = { userId: userData?.id, chatRoomId: chatRoomId };\n    if (chatRoomId !== undefined) {\n      socket?.emit('join', socketData);\n      postLastReadTimestamp();\n    }\n\n    return () => {\n      socket?.emit('leave', socketData);\n      postLastReadTimestamp();\n    };\n  }, [chatRoomId]);\n\n  return (\n    <>\n      <MainLayout>\n        <ChatComponenetWrapper>\n          <div className=\"chat-room-list\">\n            <ChatRoomList />\n          </div>\n          <Divider orientation=\"vertical\" />\n          <div className=\"chat-box\">\n            {chatRoomId === undefined ? <></> : <ChatBox />}\n          </div>\n        </ChatComponenetWrapper>\n      </MainLayout>\n    </>\n  );\n}\n"],"names":["sockets","channel","disconnect","React","undefined","io","process","transports","console","log","chatRoomId","useParams","id","mutateUnreadsLocally","mutateChatRoomsData","chatRoomsData","updatedChatRoomsData","produce","map","chatRoom","unreads","useSWR","fetcher","onSuccess","data","mutate","postLastReadTimestamp","axios","then","Wrapper","styled","ChatRoomListItem","navigate","useNavigate","onClick","title","Chip","label","color","variant","modalStyle","position","top","left","transform","width","maxHeight","bgcolor","border","boxShadow","p","CustomStyledButton","Button","CustomStyledList","List","GenerateChatRoomModal","isOpen","handleClose","friendsData","userData","useSWRChatRooms","checkedUsers","setCheckedUsers","onSubmit","e","preventDefault","length","alert","chatRoomMembers","push","chatRoomTitle","target","value","members","res","Modal","open","onClose","Box","component","sx","OutlinedInput","name","placeholder","size","fullWidth","required","Divider","mt","mb","friends","ListItem","secondaryAction","Checkbox","edge","onChange","following","currentIndex","indexOf","newCheckedUsers","splice","checked","nickname","type","ChatRoomController","isModalOpen","setIsModalOpen","className","MarkChatReadOutlined","AddBoxOutlined","Chat","padding","margin","button","props","isMyMessage","Color","UserChat","showsSender","message","createdAt","sender","senderNickname","dayjs","format","ChatList","chatsByDate","Object","entries","date","chats","chat","index","system","ChatRoomMemberModal","member","ChatRoomInfo","setChatRoomMembers","chatRoomData","setChatRoomData","catch","error","find","getChatRoomData","InfoOutlined","fontSize","MessageInputBoxWrapper","MessageInputBox","onSubmitSendMessage","input","ml","onDelete","ChatBoxLayout","ChatBox","useSWRInfinite","setTimeout","scrollToBottom","chatData","mutateChatData","setSWRInfiniteSize","setSize","chatBoxScroll","current","scrollTop","scrollHeight","onChatBoxScroll","scrollHeightBeforeFetch","setUncheckedChat","uncheckedChat","handleNewChatAlertDelete","useSocket","socket","onMessage","socketChat","previousChatData","updatedChatData","unshift","on","off","forEach","sortChatDataByDate","concat","reverse","ref","onScroll","ChatInbox","socketData","userId","emit","MainLayout","orientation"],"sourceRoot":""}