{"version":3,"file":"static/js/361.5b534e48.chunk.js","mappings":"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","sources":["hooks/useSocket.ts","components/Chat/ChatRoomList/ChatRoomListItem/style.tsx","components/Chat/ChatRoomList/ChatRoomListItem/index.tsx","components/Chat/ChatRoomList/ChatRoomController/GenerateChatRoomModal/style.tsx","components/Chat/ChatRoomList/ChatRoomController/GenerateChatRoomModal/index.tsx","components/Chat/ChatRoomList/ChatRoomController/style.tsx","components/Chat/ChatRoomList/ChatRoomController/index.tsx","components/Chat/ChatRoomList/index.tsx","pages/Chat/style.tsx","components/Chat/ChatBox/ChatList/UserChat/style.tsx","components/Chat/ChatBox/ChatList/UserChat/index.tsx","components/Chat/ChatBox/ChatList/SystemChat/style.tsx","components/Chat/ChatBox/ChatList/SystemChat/index.tsx","components/Chat/ChatBox/ChatList/index.tsx","components/Chat/ChatBox/ChatRoomInfo/ChatRoomMembersModal/style.tsx","components/Chat/ChatBox/ChatRoomInfo/ChatRoomMembersModal/index.tsx","components/Chat/ChatBox/ChatRoomInfo/style.tsx","components/Chat/ChatBox/ChatRoomInfo/index.tsx","components/Chat/ChatBox/MessageInputBox/style.tsx","components/Chat/ChatBox/MessageInputBox/index.tsx","components/Chat/ChatBox/NewChatAlert/index.tsx","components/Chat/ChatBox/style.tsx","components/Chat/ChatBox/index.tsx","pages/Chat/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { io, Socket } from 'socket.io-client';\n\nconst sockets: { [id: string]: Socket } = {};\n\nconst useSocket = (channel: string): [Socket | undefined, () => void] => {\n  const disconnect = React.useCallback(() => {\n    if (sockets[channel]) {\n      sockets[channel].disconnect();\n      delete sockets[channel];\n    }\n  }, [channel]);\n\n  // namespace: 게임 or 채팅 채널로 구분\n  // room : 게임 방, 채팅 방 id\n  if (channel !== 'game' && channel !== 'chat') {\n    return [undefined, () => {}];\n  }\n\n  if (!sockets[channel]) {\n    sockets[channel] = io(`${process.env.REACT_APP_SERVER}/${channel}`, { transports: ['websocket'] });\n    console.log('create socket', channel, sockets[channel]);\n  }\n\n  return [sockets[channel], disconnect];\n};\n\nexport default useSocket;\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nexport const Wrapper = styled.div`\n  height: 35px;\n  width: 100%;\n`;\n","import * as React from 'react';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IChatRoom } from '@typings/dbTypes';\nimport axios from '@utils/axios';\n\nimport { useNavigate } from 'react-router-dom';\n\nimport { Wrapper } from './style';\n\ntype propsType = {\n  data: IChatRoom;\n};\n\nexport default function ChatRoomListItem({ data }: propsType) {\n  const navigate = useNavigate();\n\n  const onClick = () => {\n    navigate(`/chat/${data.id}`);\n  };\n\n  return (\n    <Wrapper onClick={onClick}>\n      <span>{data.title}</span>\n    </Wrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport { Button, List } from '@mui/material';\n\nexport const modalStyle = {\n  position: 'absolute' as 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  maxHeight: 630,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 2,\n};\n\nexport const CustomStyledButton = styled(Button)`\n  float: right;\n`;\n\nexport const CustomStyledList = styled(List)`\n  max-height: 500px;\n  overflow-y: auto;\n`;\n","import * as React from 'react';\n\nimport { Modal, Box, Button, Checkbox, Divider, List, ListItem, OutlinedInput } from '@mui/material';\nimport { modalStyle, CustomStyledButton, CustomStyledList } from './style';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport axios from '@utils/axios';\nimport { IFriends, IUserRelation, IChatRoom, IUser } from '@typings/dbTypes';\n\ntype propsType = {\n  isOpen: boolean;\n  handleClose: () => void;\n};\n\nexport default function GenerateChatRoomModal({ isOpen, handleClose }: propsType) {\n  const { data: friendsData } = useSWR<IFriends>(`/friend`, fetcher);\n  const { data: chatRoomsData, mutate: mutateChatRoomData } = useSWR<IChatRoom[]>(`/chat-room`, fetcher);\n  const { data: userData, mutate: mutateUserData } = useSWR<IUser>(`/user/me`, fetcher);\n\n  const [checkedUsers, setCheckedUsers] = React.useState<string[]>([]);\n  const handleUserToggle = (id: string) => () => {\n    const currentIndex = checkedUsers.indexOf(id);\n    const newCheckedUsers = [...checkedUsers];\n\n    if (currentIndex === -1) {\n      newCheckedUsers.push(id);\n    } else {\n      newCheckedUsers.splice(currentIndex, 1);\n    }\n\n    setCheckedUsers(newCheckedUsers);\n  };\n\n  const onSubmit = React.useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (checkedUsers.length === 0) {\n        return alert('채팅방멤버를 체크해주세요.');\n      }\n      if (checkedUsers.length === 1) {\n        return alert('그룹채팅방 만들기 입니다. 일대일 채팅은 자동생성 된 채팅방을 이용해주세요.');\n      }\n\n      handleClose();\n      if (userData !== undefined) {\n        const chatRoomMembers = [...checkedUsers];\n        chatRoomMembers.push(userData.id);\n        const chatRoomTitle = e.target.chatRoomTitle.value;\n        console.log('채팅방 유저들', chatRoomMembers, '채팅방 이름', e.target.chatRoomTitle.value);\n\n        axios\n          .post(`/chat-room?dm=false`, {\n            members: chatRoomMembers,\n            title: chatRoomTitle,\n          })\n          .then((res) => {\n            mutateChatRoomData();\n            e.target.chatRoomTitle.value = '';\n            setCheckedUsers([]);\n          });\n      }\n    },\n    [checkedUsers],\n  );\n\n  return (\n    <Modal open={isOpen} onClose={handleClose}>\n      <Box component=\"form\" sx={modalStyle} onSubmit={onSubmit}>\n        <OutlinedInput name=\"chatRoomTitle\" placeholder=\"채팅방 이름\" size=\"small\" fullWidth required />\n        <Divider sx={{ mt: 1, mb: 1 }} />\n        <CustomStyledList>\n          {friendsData?.friends?.map((friendsData: IUserRelation) => {\n            return (\n              <ListItem\n                key={+friendsData.id}\n                secondaryAction={\n                  <Checkbox\n                    edge=\"end\"\n                    onChange={handleUserToggle(friendsData.following.id)}\n                    checked={checkedUsers.indexOf(friendsData.following.id) !== -1}\n                  />\n                }\n              >\n                <span>\n                  {friendsData.following.nickname}({friendsData.following.id})님\n                </span>\n              </ListItem>\n            );\n          })}\n        </CustomStyledList>\n        <Divider sx={{ mt: 1, mb: 1 }} />\n        <CustomStyledButton type=\"submit\" variant=\"contained\">\n          채팅방 만들기\n        </CustomStyledButton>\n      </Box>\n    </Modal>\n  );\n}\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n\n  padding: 5px;\n\n  & > .icons {\n    padding: 3px;\n  }\n`;\n","import * as React from 'react';\n\nimport { MarkChatReadOutlined, AddBoxOutlined } from '@mui/icons-material';\n\nimport GenerateChatRoomModal from './GenerateChatRoomModal';\nimport { Wrapper } from './style';\n\nexport default function ChatRoomController() {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n\n  const onClickReadAll = () => {\n    console.log('안 읽은 채팅 모두 읽기');\n  };\n\n  const onClickGenerateChatRoom = () => {\n    openModal();\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <span className=\"icons\" onClick={onClickReadAll}>\n          <MarkChatReadOutlined />\n        </span>\n        <span className=\"icons\" onClick={onClickGenerateChatRoom}>\n          <AddBoxOutlined />\n        </span>\n      </Wrapper>\n\n      <GenerateChatRoomModal isOpen={isModalOpen} handleClose={closeModal} />\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IChatRoom } from '@typings/dbTypes';\nimport axios from '@utils/axios';\n\nimport ChatRoomList from './ChatRoomListItem';\nimport ChatRoomController from './ChatRoomController';\n\nimport { Divider, List, ListItem } from '@mui/material';\n\nexport default function Chat() {\n  const { data: chatRoomsData, mutate: mutateChatRoomData } = useSWR<IChatRoom[]>(`/chat-room`, fetcher);\n\n  return (\n    <>\n      <ChatRoomController />\n      <Divider />\n      <List sx={{ padding: 0, margin: 0 }}>\n        {chatRoomsData?.map((data: IChatRoom) => {\n          return (\n            <ListItem key={+data.id} button>\n              <ChatRoomList data={data} />\n            </ListItem>\n          );\n        })}\n      </List>\n    </>\n  );\n}\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nconst Wrapper = styled.div`\n  display: flex;\n  height: 100%;\n\n  & > .chat-room-list {\n    width: 25%;\n    overflow-y: auto;\n    overflow-x: hidden;\n  }\n\n  & > .chat-box {\n    width: 75%;\n  }\n`;\n\nexport default Wrapper;\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\ntype wrapperProps = {\n  isMyMessage: boolean;\n};\nexport const Wrapper = styled.div<wrapperProps>`\n  text-align: ${(props) => (props.isMyMessage ? 'right' : 'left')};\n  margin: 8px 0px;\n\n  & > .sender {\n    font-size: 13px;\n    margin: 2px;\n  }\n\n  & > .content {\n    display: flex;\n    flex-direction: ${(props) => (props.isMyMessage ? 'row-reverse' : 'row')};\n    align-items: center;\n\n    & > .message {\n      max-width: 800px;\n      word-break: break-all;\n      text-align: left;\n\n      border-radius: 6px;\n      padding: 3px 6px;\n      background-color: ${Color.TransparentGray};\n\n      font-size: 16px;\n    }\n\n    & > .timestamp {\n      margin: 0px 5px;\n      font-size: 8px;\n    }\n  }\n`;\n","import * as React from 'react';\n\nimport dayjs from 'dayjs';\nimport { IChat } from '@typings/dbTypes';\n\nimport { Wrapper } from './style';\n\ntype propsType = {\n  data: IChat;\n  isMyMessage: boolean;\n  showsSender: boolean;\n};\n\nexport default function UserChat({ data, isMyMessage, showsSender }: propsType) {\n  const { message, createdAt } = data;\n  const { id: senderId, nickname: senderNickname } = data.sender;\n\n  return (\n    <Wrapper isMyMessage={isMyMessage}>\n      {showsSender ? <div className=\"sender\">{senderNickname}님</div> : <></>}\n      <div className=\"content\">\n        <span className=\"message\">{message}</span>\n        <span className=\"timestamp\">{dayjs(createdAt).format('h:mm A')}</span>\n      </div>\n    </Wrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nexport const Wrapper = styled.div`\n  text-align: center;\n  margin: 8px 0px;\n\n  & > .sender {\n    font-size: 13px;\n    margin: 2px;\n  }\n\n  & > .content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    & > .message {\n      max-width: 800px;\n      word-break: break-all;\n      text-align: left;\n\n      border-radius: 6px;\n      padding: 3px 6px;\n      background-color: ${Color.TransparentGray};\n\n      font-size: 16px;\n    }\n  }\n`;\n","import * as React from 'react';\n\nimport { IChat } from '@typings/dbTypes';\n\nimport { Wrapper } from './style';\n\ntype propsType = {\n  data: IChat;\n};\n\nexport default function UserChat({ data }: propsType) {\n  const { message, createdAt } = data;\n\n  return (\n    <Wrapper>\n      <div className=\"content\">\n        <span className=\"message\">{message}</span>\n      </div>\n    </Wrapper>\n  );\n}\n","import * as React from 'react';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IUser, IChat } from '@typings/dbTypes';\n\nimport dayjs from 'dayjs';\n\nimport { Divider, Chip } from '@mui/material';\nimport UserChat from './UserChat';\nimport SystemChat from './SystemChat';\n\ntype propsType = {\n  chatsByDate: { [key: string]: IChat[] };\n};\n\nexport default function ChatList({ chatsByDate }: propsType) {\n  const { data: userData } = useSWR<IUser>(`/user/me`, fetcher);\n\n  React.useEffect(() => {\n    console.log('챗리스트 컴포넌트 테스트', Object.entries(chatsByDate));\n  });\n\n  return (\n    <>\n      {Object.entries(chatsByDate).map(([date, chats]) => {\n        return (\n          <div key={date}>\n            <Divider>\n              <Chip label={date} />\n            </Divider>\n            {chats.map((chat, index) => {\n              if (chat.system) {\n                return <SystemChat data={chat} />;\n              }\n              if (chat.sender.id === userData?.id) {\n                return (\n                  <UserChat\n                    key={chat.id}\n                    data={chat}\n                    showsSender={false}\n                    isMyMessage={true}\n                  />\n                );\n              }\n              if (index === 0) {\n                return (\n                  <UserChat\n                    key={chat.id}\n                    data={chat}\n                    showsSender={true}\n                    isMyMessage={false}\n                  />\n                );\n              } else {\n                return (\n                  <UserChat\n                    key={chat.id}\n                    data={chat}\n                    showsSender={\n                      chats[index - 1].sender.id !== chat.sender.id ||\n                      dayjs(chats[index - 1].createdAt).format(\n                        'YYYY-MM-DD HH:mm',\n                      ) !== dayjs(chat.createdAt).format('YYYY-MM-DD HH:mm')\n                    }\n                    isMyMessage={false}\n                  />\n                );\n              }\n            })}\n          </div>\n        );\n      })}\n    </>\n  );\n}\n","export const modalStyle = {\n  position: 'absolute' as 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n","import { Modal, Box, Typography } from '@mui/material';\nimport { modalStyle } from './style';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IUser } from '@typings/dbTypes';\n\ntype propsType = {\n  isOpen: boolean;\n  handleClose: () => void;\n  chatRoomMembers: IUser[] | undefined;\n};\n\nexport default function ChatRoomMemberModal({ isOpen, handleClose, chatRoomMembers }: propsType) {\n  const { data: userData } = useSWR<IUser>(`/user/me`, fetcher);\n\n  return (\n    <Modal open={isOpen} onClose={handleClose}>\n      <Box sx={modalStyle}>\n        {chatRoomMembers?.map((member) => {\n          if (member.id === userData?.id) return;\n          return (\n            <div key={member.id}>\n              {member.nickname}({member.id})님\n            </div>\n          );\n        })}\n      </Box>\n    </Modal>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  padding: 15px;\n  height: 25px;\n\n  display: flex;\n  align-items: center;\n\n  font-size: 18px;\n`;\n","import * as React from 'react';\n\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IChatRoom, IUser } from '@typings/dbTypes';\nimport axios from '@utils/axios';\n\nimport ChatRoomMembersModal from './ChatRoomMembersModal';\nimport { InfoOutlined } from '@mui/icons-material';\nimport { Wrapper } from './style';\n\nimport { useParams } from 'react-router-dom';\n\nexport default function ChatRoomInfo() {\n  const { id: chatRoomId } = useParams();\n  const { data: chatRoomsData, mutate: mutateChatRoomsData } = useSWR<IChatRoom[]>(`/chat-room`, fetcher);\n  const [chatRoomMembers, setChatRoomMembers] = React.useState<IUser[] | undefined>();\n  const [chatRoomData, setChatRoomData] = React.useState<IChatRoom | undefined>();\n\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n\n  React.useEffect(() => {\n    const getChatRoomMembers = () => {\n      axios\n        .get<IUser[]>(`/chat-room/${chatRoomId}/member`)\n        .then((res) => {\n          setChatRoomMembers(res.data);\n          console.log(chatRoomMembers);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    };\n\n    const getChatRoomData = () => {\n      const chatRoomData = chatRoomsData?.find((data) => {\n        if (chatRoomId !== undefined) {\n          return data.id === +chatRoomId;\n        }\n      });\n      setChatRoomData(chatRoomData);\n    };\n\n    getChatRoomMembers();\n    getChatRoomData();\n  }, [chatRoomId]);\n\n  return (\n    <Wrapper>\n      <span>{chatRoomData !== undefined ? chatRoomData.title : ' '}</span>\n      <InfoOutlined onClick={openModal} fontSize=\"small\" />\n\n      <ChatRoomMembersModal isOpen={isModalOpen} handleClose={closeModal} chatRoomMembers={chatRoomMembers} />\n    </Wrapper>\n  );\n}\n","import styled from '@emotion/styled';\nimport Color from '@styles/Color';\n\nexport const MessageInputBoxWrapper = styled.form`\n  width: 90%;\n  margin: 0 auto;\n  padding: 5px;\n  text-align: center;\n\n  border: 1px solid ${Color.Gray};\n  border-radius: 20px;\n\n  & > input {\n    background-color: transparent;\n\n    width: calc(90% - 30px);\n    height: 40px;\n\n    font-family: MinSans;\n    font-size: 15px;\n\n    border: none;\n    &: focus {\n      outline: none;\n    }\n  }\n`;\n","import * as React from 'react';\n\nimport axios from '@utils/axios';\n\nimport { useParams } from 'react-router-dom';\n\nimport { MessageInputBoxWrapper } from './style';\nimport { Button } from '@mui/material';\n\nexport default function MessageInputBox() {\n  const { id: chatRoomId } = useParams();\n\n  const onSubmitSendMessage = React.useCallback(\n    async (e) => {\n      e.preventDefault();\n      console.log(e.target.input.value);\n      await axios\n        .post(`/chat-room/${chatRoomId}/chat`, {\n          message: e.target.input.value,\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      e.target.input.value = '';\n    },\n    [chatRoomId],\n  );\n\n  return (\n    <MessageInputBoxWrapper onSubmit={onSubmitSendMessage}>\n      <input name=\"input\" placeholder=\"메세지 입력...\" />\n      <Button variant=\"text\" type=\"submit\" sx={{ ml: '5px' }}>\n        보내기\n      </Button>\n    </MessageInputBoxWrapper>\n  );\n}\n","import * as React from 'react';\n\nimport { IChat } from '@typings/dbTypes';\n\nimport { Chip } from '@mui/material';\n\ntype propsType = {\n  data: IChat;\n  onClick: () => void;\n  onDelete: () => void;\n};\n\nexport default function UserChat({ data, onClick, onDelete }: propsType) {\n  const { message, sender } = data;\n  const { nickname } = sender;\n\n  const label = `${nickname}님: ${message}`;\n  return (\n    <Chip\n      label={label}\n      onClick={onClick}\n      onDelete={onDelete}\n      sx={{\n        width: '100%',\n      }}\n    />\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ChatBoxLayout = styled.div`\n  height: 100%;\n\n  -ms-user-select: text;\n  -moz-user-select: text;\n  -khtml-user-select: text;\n  -webkit-user-select: text;\n  user-select: text;\n\n  & > .chat-room-info {\n    height: 55px;\n  }\n\n  & > .chat-room {\n    position: relative;\n\n    height: calc(100% - 10px - 55px - 70px);\n    padding: 5px 20px 5px 20px;\n\n    overflow-y: auto;\n    overflow-x: hidden;\n\n    & > .new-chat {\n      position: sticky;\n      bottom: 20px;\n    }\n  }\n\n  & > .message-input {\n    padding: 5px;\n    height: 60px;\n  }\n`;\n","import * as React from 'react';\nimport useSocket from '@hooks/useSocket';\n\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport fetcher from '@utils/swrFetcehr';\nimport { IChat, IUser } from '@typings/dbTypes';\nimport axios from '@utils/axios';\n\nimport produce from 'immer';\n\nimport { useParams } from 'react-router-dom';\n\nimport dayjs from 'dayjs';\n\nimport ChatList from './ChatList';\nimport ChatRoomInfo from './ChatRoomInfo';\nimport MessageInputBox from './MessageInputBox';\nimport NewChatAlert from './NewChatAlert';\n\nimport { Divider } from '@mui/material';\nimport { ChatBoxLayout } from './style';\n\nexport default function ChatBox() {\n  //get Chat Data from server\n  const { id: chatRoomId } = useParams();\n  const { data: userData } = useSWR<IUser>(`/user/me`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChatData,\n    setSize: setSWRInfiniteSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/chat-room/${chatRoomId}/chat/?page=${index + 1}`,\n    fetcher,\n    {\n      onSuccess(data) {\n        if (data?.length === 1) {\n          setTimeout(() => {\n            //채팅 로딩 시간 기다림 + 최초 로딩시에만\n            scrollToBottom();\n          }, 100);\n        }\n      },\n    },\n  );\n\n  //scroll\n  const chatBoxScroll = React.useRef<HTMLInputElement>(null);\n  const scrollToBottom = React.useCallback(() => {\n    if (chatBoxScroll && chatBoxScroll.current) {\n      chatBoxScroll.current.scrollTop = chatBoxScroll.current.scrollHeight;\n    }\n  }, [chatRoomId]);\n\n  const onChatBoxScroll = React.useCallback(\n    (e) => {\n      if (e.target.scrollTop === 0) {\n        //맨 위\n        if (\n          //더 이상 불러올 채팅이 없지 않다면\n          chatData &&\n          !(\n            chatData?.[0]?.length === 0 ||\n            chatData?.[chatData?.length - 1]?.length < 100\n          )\n        ) {\n          const scrollHeightBeforeFetch = e.target.scrollHeight;\n          setSWRInfiniteSize((size) => size + 1).then(() => {\n            if (chatBoxScroll && chatBoxScroll.current) {\n              e.target.scrollTop =\n                chatBoxScroll?.current?.scrollHeight - scrollHeightBeforeFetch;\n            }\n          });\n        }\n      }\n      if (e.target.scrollTop >= e.target.scrollHeight - 600) {\n        //맨 아래\n        setUncheckedChat(undefined);\n      }\n    },\n    [chatData],\n  );\n\n  //new message float alert\n  const [uncheckedChat, setUncheckedChat] = React.useState<IChat>();\n  const handleNewChatAlertClick = () => {\n    handleNewChatAlertDelete();\n    scrollToBottom();\n  };\n  const handleNewChatAlertDelete = () => {\n    setUncheckedChat(undefined);\n  };\n\n  React.useEffect(() => {\n    setUncheckedChat(undefined);\n  }, [chatRoomId]);\n\n  //socket\n  const [socket] = useSocket('chat');\n\n  const onMessage = React.useCallback(\n    (socketChat: IChat) => {\n      console.log('웹 소켓 메세지 도착', socketChat);\n      mutateChatData((previousChatData) => {\n        //socket 데이터 바탕으로 local에서 직접 업데이트\n        const updatedChatData = produce(\n          previousChatData,\n          (previousChatData) => {\n            previousChatData?.[0].unshift(socketChat);\n          },\n        );\n        return updatedChatData;\n      }, false).then(() => {\n        //그 후에 채팅창 UX 조절 (스크롤 or 토스트)\n        if (chatBoxScroll && chatBoxScroll.current) {\n          console.log(\n            chatBoxScroll.current.scrollTop,\n            chatBoxScroll.current.scrollHeight,\n          );\n          if (\n            //아직 채팅창이 한장을 안넘어가거나\n            chatBoxScroll.current.scrollHeight < 800 ||\n            //이미 충분히 밑이거나\n            chatBoxScroll.current.scrollTop >\n              chatBoxScroll.current.scrollHeight - 800 ||\n            //본인이 보낸 메세지이면\n            socketChat.sender.id === userData?.id\n          ) {\n            scrollToBottom();\n            setUncheckedChat(undefined);\n          } else {\n            setUncheckedChat(socketChat);\n          }\n        }\n      });\n    },\n    [mutateChatData],\n  );\n\n  React.useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message');\n    };\n  }, [socket, mutateChatData]);\n\n  //uswSWRInfinte 에서 온 data를 후가공함.\n  const sortChatDataByDate = (chats: IChat[]) => {\n    console.log('sortChatDataByDate 함수 실행');\n    //데이터에 날자를 기준으로\n    const chatsByDate: { [key: string]: IChat[] } = {};\n\n    chats.forEach((chat) => {\n      const date = dayjs(chat.createdAt).format('YYYY-MM-DD');\n      if (chatsByDate[date] === undefined) {\n        chatsByDate[date] = [chat];\n      } else {\n        chatsByDate[date].push(chat);\n      }\n    });\n\n    return chatsByDate;\n  };\n\n  const chatsByDate =\n    chatData !== undefined\n      ? sortChatDataByDate(([] as IChat[]).concat(...chatData).reverse())\n      : undefined;\n\n  return (\n    <ChatBoxLayout>\n      <div className=\"chat-room-info\">\n        <ChatRoomInfo />\n      </div>\n      <Divider />\n      <div className=\"chat-room\" ref={chatBoxScroll} onScroll={onChatBoxScroll}>\n        {chatsByDate !== undefined ? (\n          <ChatList chatsByDate={chatsByDate} />\n        ) : (\n          <></>\n        )}\n        {uncheckedChat !== undefined ? (\n          <div className=\"new-chat\">\n            <NewChatAlert\n              data={uncheckedChat}\n              onClick={handleNewChatAlertClick}\n              onDelete={handleNewChatAlertDelete}\n            />\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n      <div className=\"message-input\">\n        <MessageInputBox />\n      </div>\n    </ChatBoxLayout>\n  );\n}\n","import * as React from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport useSocket from '@hooks/useSocket';\nimport useSWR from 'swr';\nimport fetcher from '@utils/swrFetcehr';\nimport { IUser } from '@typings/dbTypes';\n\nimport ChatRoomList from '@components/Chat/ChatRoomList';\n\nimport { Divider } from '@mui/material';\nimport ChatComponenetWrapper from '../../pages/Chat/style';\n\nimport MainLayout from '@layouts/MainLayout';\nimport ChatBox from '@components/Chat/ChatBox';\n\nexport default function ChatInbox() {\n  const { id: chatRoomId } = useParams();\n  const { data: userData } = useSWR<IUser>(`/user/me`, fetcher);\n  const [socket, disconnectSocket] = useSocket('chat');\n\n  React.useEffect(() => {\n    const socketData = { userId: userData?.id, chatRoomId: chatRoomId };\n    if (chatRoomId !== undefined) {\n      console.log('채팅방 입장', socketData);\n      socket?.emit('join', socketData);\n    }\n    return () => {\n      console.log('채팅방 나가기', socketData);\n      socket?.emit('leave', socketData);\n    };\n  }, [chatRoomId]);\n\n  return (\n    <>\n      <MainLayout>\n        <ChatComponenetWrapper>\n          <div className=\"chat-room-list\">\n            <ChatRoomList />\n          </div>\n          <Divider orientation=\"vertical\" />\n          <div className=\"chat-box\">{chatRoomId === undefined ? <></> : <ChatBox />}</div>\n        </ChatComponenetWrapper>\n      </MainLayout>\n    </>\n  );\n}\n"],"names":["sockets","channel","disconnect","React","undefined","io","process","transports","console","log","Wrapper","styled","ChatRoomListItem","data","navigate","useNavigate","onClick","id","title","modalStyle","position","top","left","transform","width","maxHeight","bgcolor","border","boxShadow","p","CustomStyledButton","Button","CustomStyledList","List","GenerateChatRoomModal","isOpen","handleClose","friendsData","useSWR","fetcher","mutateChatRoomData","mutate","userData","checkedUsers","setCheckedUsers","onSubmit","e","preventDefault","length","alert","chatRoomMembers","push","chatRoomTitle","target","value","axios","members","then","res","Modal","open","onClose","Box","component","sx","OutlinedInput","name","placeholder","size","fullWidth","required","Divider","mt","mb","friends","map","ListItem","secondaryAction","Checkbox","edge","onChange","following","currentIndex","indexOf","newCheckedUsers","splice","checked","nickname","type","variant","ChatRoomController","isModalOpen","setIsModalOpen","className","MarkChatReadOutlined","AddBoxOutlined","Chat","chatRoomsData","padding","margin","button","props","isMyMessage","Color","UserChat","showsSender","message","createdAt","sender","senderNickname","dayjs","format","ChatList","chatsByDate","Object","entries","date","chats","Chip","label","chat","index","system","ChatRoomMemberModal","member","ChatRoomInfo","chatRoomId","useParams","setChatRoomMembers","chatRoomData","setChatRoomData","catch","error","find","getChatRoomData","InfoOutlined","fontSize","MessageInputBoxWrapper","MessageInputBox","onSubmitSendMessage","input","ml","onDelete","ChatBoxLayout","ChatBox","useSWRInfinite","onSuccess","setTimeout","scrollToBottom","chatData","mutateChatData","setSWRInfiniteSize","setSize","chatBoxScroll","current","scrollTop","scrollHeight","onChatBoxScroll","scrollHeightBeforeFetch","setUncheckedChat","uncheckedChat","handleNewChatAlertDelete","useSocket","socket","onMessage","socketChat","previousChatData","updatedChatData","produce","unshift","on","off","forEach","sortChatDataByDate","concat","reverse","ref","onScroll","ChatInbox","socketData","userId","emit","MainLayout","orientation"],"sourceRoot":""}